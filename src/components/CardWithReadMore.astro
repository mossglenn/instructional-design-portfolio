---
import classNames from 'classnames';
interface Props {
  openPromptText?: string;
  closePromptText?: string;
  class?: string;
  style?: string;
}
const uniqueId = crypto.randomUUID().split('-')[0];
// `class: customclass` creates an alias for the reserved `class` prop
const {
  openPromptText = 'Read more...',
  closePromptText = 'Read less',
  class: customClass = '',
  style: customStyle = '',
} = Astro.props;
---

<div
  class={classNames(
    'card-with-read-more mx-2 my-6 px-4 pt-3 pb-4 m-auto h-full flex flex-col',
    customClass,
  )}
  style={customStyle}
>
  <div class="flex-grow font-normal">
    <slot name="visible-content" />
    <div
      id={`ca-content-${uniqueId}`}
      class="max-h-0 overflow-hidden transition-[max-height] duration-700 ease-in-out"
    >
      <slot name="read-more-content" />
    </div>
  </div>

  <div id={`ca-top-section-${uniqueId}`}>
    <button
      id={`ca-top-button-${uniqueId}`}
      type="button"
      class={'card-accordian cursor-pointer border-1 border-neutral-400 bg-linear-to-br from-neutral-50 to-neutral-100 text-xs text-accent-900 hover:shadow-accent-500 hover:text-accent-950 flex items-center rounded-md shadow-md py-1 px-2 -mx-2  justify-start w-full font-medium rtl:text-right gap-3'}
    >
      <div>{openPromptText}</div>
      <svg
        class="w-3 h-3 rotate-180 shrink-0"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 10 6"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5 5 1 1 5"></path>
      </svg>
    </button>
  </div>
  <div id={`ca-bottom-section-${uniqueId}`} style="display:none">
    <button
      id={`ca-bottom-button-${uniqueId}`}
      type="button"
      class="card-accordian cursor-pointer bg-linear-to-br from-secondary-950 to-secondary-800 hover:bg-linear-to-br hover:from-primary-800 hover:to-primary-600 hover:text-primary-50 text-xs text-secondary-100 flex items-center rounded-md border border-secondary-200 hover:border-accent-500 hover:bg-primary-600 py-1 px-2 -mx-2 justify-start w-full font-medium rtl:text-right gap-3"
      aria-expanded="false"
    >
      <div>{closePromptText}</div>
      <svg
        class="w-3 h-3 shrink-0"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 10 6"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5 5 1 1 5"></path>
      </svg>
    </button>
  </div>
</div>
<script>
  function smoothScrollTo(targetY: number, duration = 700) {
    const startY = window.scrollY;
    const distance = targetY - startY;
    let startTime: number | null = null;

    function animation(currentTime: number) {
      if (!startTime) startTime = currentTime;
      const timeElapsed = currentTime - startTime;
      const progress = Math.min(timeElapsed / duration, 1);

      // easeInOutQuad
      const eased =
        progress < 0.5
          ? 2 * progress * progress
          : -1 + (4 - 2 * progress) * progress;

      window.scrollTo(0, startY + distance * eased);

      if (timeElapsed < duration) {
        requestAnimationFrame(animation);
      }
    }

    requestAnimationFrame(animation);
  }

  function setupCardWithReadMoreToggles() {
    const caButtons = document.querySelectorAll('.card-accordian');
    if (!caButtons || caButtons.length === 0) return;

    caButtons.forEach((button) => {
      if (!button) return;

      const buttonID = button.id.split('-')[3];
      const caTopSection = document.getElementById(
        `ca-top-section-${buttonID}`,
      );
      const caBottomSection = document.getElementById(
        `ca-bottom-section-${buttonID}`,
      );
      const caContentSection = document.getElementById(
        `ca-content-${buttonID}`,
      );

      if (
        caTopSection instanceof HTMLElement &&
        caBottomSection instanceof HTMLElement &&
        caContentSection instanceof HTMLElement
      ) {
        button.addEventListener('click', () => {
          const isTop = button.id.includes('top');

          if (isTop) {
            caTopSection.style.display = 'none';
            caContentSection.style.maxHeight = `${caContentSection.scrollHeight}px`;
            caBottomSection.style.display = 'flex';

            const card = button.closest('.card-with-read-more');
            if (card) {
              const cardTop = card.getBoundingClientRect().top + window.scrollY;
              smoothScrollTo(cardTop, 700);
            }
          } else {
            caTopSection.style.display = 'flex';
            caContentSection.style.maxHeight = '0px';
            caBottomSection.style.display = 'none';
          }
        });
      } else {
        console.error(
          `Element with ID ca-top-section-${buttonID} or ca-bottom-section-${buttonID} or ca-content-${buttonID} not found.`,
        );
      }
    });
  }

  document.addEventListener('DOMContentLoaded', setupCardWithReadMoreToggles);
</script>
